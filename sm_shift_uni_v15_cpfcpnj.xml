<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>sm_shift_uni_v15_cpfcpnj</name>
    <description />
    <extended_description />
    <trans_version />
    <trans_type>Normal</trans_type>
    <trans_status>0</trans_status>
    <directory>/</directory>
    <parameters>
    </parameters>
    <log>
      <trans-log-table>
        <connection />
        <schema />
        <table />
        <size_limit_lines />
        <interval />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STATUS</id>
          <enabled>Y</enabled>
          <name>STATUS</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
          <subject />
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
          <subject />
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
          <subject />
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
          <subject />
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
          <subject />
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
          <subject />
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>STARTDATE</id>
          <enabled>Y</enabled>
          <name>STARTDATE</name>
        </field>
        <field>
          <id>ENDDATE</id>
          <enabled>Y</enabled>
          <name>ENDDATE</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>DEPDATE</id>
          <enabled>Y</enabled>
          <name>DEPDATE</name>
        </field>
        <field>
          <id>REPLAYDATE</id>
          <enabled>Y</enabled>
          <name>REPLAYDATE</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>Y</enabled>
          <name>LOG_FIELD</name>
        </field>
        <field>
          <id>EXECUTING_SERVER</id>
          <enabled>N</enabled>
          <name>EXECUTING_SERVER</name>
        </field>
        <field>
          <id>EXECUTING_USER</id>
          <enabled>N</enabled>
          <name>EXECUTING_USER</name>
        </field>
        <field>
          <id>CLIENT</id>
          <enabled>N</enabled>
          <name>CLIENT</name>
        </field>
      </trans-log-table>
      <perf-log-table>
        <connection />
        <schema />
        <table />
        <interval />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>SEQ_NR</id>
          <enabled>Y</enabled>
          <name>SEQ_NR</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>INPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>INPUT_BUFFER_ROWS</name>
        </field>
        <field>
          <id>OUTPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>OUTPUT_BUFFER_ROWS</name>
        </field>
      </perf-log-table>
      <channel-log-table>
        <connection />
        <schema />
        <table />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>LOGGING_OBJECT_TYPE</id>
          <enabled>Y</enabled>
          <name>LOGGING_OBJECT_TYPE</name>
        </field>
        <field>
          <id>OBJECT_NAME</id>
          <enabled>Y</enabled>
          <name>OBJECT_NAME</name>
        </field>
        <field>
          <id>OBJECT_COPY</id>
          <enabled>Y</enabled>
          <name>OBJECT_COPY</name>
        </field>
        <field>
          <id>REPOSITORY_DIRECTORY</id>
          <enabled>Y</enabled>
          <name>REPOSITORY_DIRECTORY</name>
        </field>
        <field>
          <id>FILENAME</id>
          <enabled>Y</enabled>
          <name>FILENAME</name>
        </field>
        <field>
          <id>OBJECT_ID</id>
          <enabled>Y</enabled>
          <name>OBJECT_ID</name>
        </field>
        <field>
          <id>OBJECT_REVISION</id>
          <enabled>Y</enabled>
          <name>OBJECT_REVISION</name>
        </field>
        <field>
          <id>PARENT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>PARENT_CHANNEL_ID</name>
        </field>
        <field>
          <id>ROOT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>ROOT_CHANNEL_ID</name>
        </field>
      </channel-log-table>
      <step-log-table>
        <connection />
        <schema />
        <table />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>N</enabled>
          <name>LOG_FIELD</name>
        </field>
      </step-log-table>
      <metrics-log-table>
        <connection />
        <schema />
        <table />
        <timeout_days />
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>METRICS_DATE</id>
          <enabled>Y</enabled>
          <name>METRICS_DATE</name>
        </field>
        <field>
          <id>METRICS_CODE</id>
          <enabled>Y</enabled>
          <name>METRICS_CODE</name>
        </field>
        <field>
          <id>METRICS_DESCRIPTION</id>
          <enabled>Y</enabled>
          <name>METRICS_DESCRIPTION</name>
        </field>
        <field>
          <id>METRICS_SUBJECT</id>
          <enabled>Y</enabled>
          <name>METRICS_SUBJECT</name>
        </field>
        <field>
          <id>METRICS_TYPE</id>
          <enabled>Y</enabled>
          <name>METRICS_TYPE</name>
        </field>
        <field>
          <id>METRICS_VALUE</id>
          <enabled>Y</enabled>
          <name>METRICS_VALUE</name>
        </field>
      </metrics-log-table>
    </log>
    <maxdate>
      <connection />
      <table />
      <field />
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file />
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
    <created_user>-</created_user>
    <created_date>2012/03/28 12:34:54.776</created_date>
    <modified_user>-</modified_user>
    <modified_date>2012/03/28 12:34:54.776</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA=</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
    <notepad>
      <note>Disclaimer: The attached mapplet is provided “as-is” and without any support services, and no warranty or guarantee is 
provided beyond what is specified under the applicable services agreement (if there is one). Using any and all copies of 
this mapplet, in whole or in part, indicates acceptance of all risks.

Setting Leading0 in "mask" step to enable / disable support for leading zero (true/false)
Setting numeric_only in "mask" step to enable to mask only numbers (true/false)
Setting keep_first=6   >> this would keep the first 6 characters of input unmasked. Leading0 starts after keep_first

Copyright (c) 2019 by Delphix. All rights reserved.</note>
      <xloc>0</xloc>
      <yloc>0</yloc>
      <width>739</width>
      <heigth>145</heigth>
      <fontname>.SF NS Text</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
  </notepads>
  <order>
    <hop>
      <from>SelectValues</from>
      <to>Mapping_Algo_MapOutSpec</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Mapplet_Algo_MapInpSpec</from>
      <to>mask</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>mask</from>
      <to>SelectValues</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <step>
    <name>Mapping_Algo_MapOutSpec</name>
    <type>MappingOutput</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <attributes />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>736</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Mapplet_Algo_MapInpSpec</name>
    <type>MappingInput</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <field>
        <name>inputValue</name>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
      </field>
      <select_unspecified>N</select_unspecified>
    </fields>
    <attributes />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>64</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>SelectValues</name>
    <type>SelectValues</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <fields>
      <select_unspecified>N</select_unspecified>
      <remove>
        <name>inputValue</name>
      </remove>
    </fields>
    <attributes />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>528</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>mask</name>
    <type>ScriptValueMod</type>
    <description />
    <distribute>Y</distribute>
    <custom_distribution />
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name />
    </partitioning>
    <compatible>N</compatible>
    <optimizationLevel>9</optimizationLevel>
    <jsScripts>
      <jsScript>
        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>// sm_shift_uni : version 1.5
// cpf_cnpj : version 1.2 -- created by: david.wells@delphix.com | original cpf/cnpj js code: daniel.stolf@delphix.com | updated by: rafael@delphix.com 

i=0;
outputValue="";
inputValueArr = '';
lead = "";
zero = false;

iscpf = false;
hasmask = false;
cnpjBranch = "";

if( inputValue == null || isEmpty(inputValue) )
{
	outputValue = inputValue;
}
else
{	
	
	outputValue = stripCNPJ(inputValue,false);
	if (inputValue.length > outputValue.length) { hasmask = true };

	if (isValidCNPJ(padLeft(outputValue,14)))
	{
		if (outputValue.length &lt;= 11 &amp;&amp; isValidCPF(padLeft(outputValue,11)))
		{
			inputValue = padLeft(outputValue,11);
			iscpf = true;
		}
		else 
		{
			inputValue = padLeft(outputValue,14);
			cnpjBranch = outputValue.substr(outputValue.length-6,4);
		}
	}
	else 
	{
		inputValue = padLeft(outputValue,11);
		iscpf = true;
	}

	last = inputValue.length
	keep = substr(inputValue,0,keep_first);
	mask = substr(inputValue,keep_first, last - keep_first);
	last2 = mask.length
	inputValueArr = mask.split("");
	for (i = 0; i &lt; last2; i++) 
	{	

		if ( (charSetNumArr.indexOf(inputValueArr[i])) != -1 )
		{	
			inputValueArr[i] = charSetNumArr[myShift(shiftValNum, (charSetNumArr.indexOf(inputValueArr[i])) , numShiftMax)];
		}
		
		if (numeric_only == false) {
			if (   (charSetStrCapsArr.indexOf(inputValueArr[i])) != -1 )
			{	
					inputValueArr[i] = charSetStrCapsArr[(charSetStrCapsArr.indexOf(inputValueArr[i]))+myShift(shiftValUpperCase, i , upperShiftMax)];
			}
			else if (   (charSetStrArr.indexOf(inputValueArr[i])) != -1  )
			{
				inputValueArr[i] = charSetStrArr[(charSetStrArr.indexOf(inputValueArr[i]))+myShift(shiftValLowerCase, i , lowerShiftMax)]; 	
			}
			else if (   (charSetLowerSpec.indexOf(inputValueArr[i])) != -1  )
			{
				inputValueArr[i] = charSetLowerSpec[(charSetLowerSpec.indexOf(inputValueArr[i]))+myShift(shiftValLowerSpec, i , lowerSpecMax)]; 	
			}
			else if (   (charSetUpperSpec.indexOf(inputValueArr[i])) != -1  )
			{
				inputValueArr[i] = charSetUpperSpec[(charSetUpperSpec.indexOf(inputValueArr[i]))+myShift(shiftValUpperSpec, i , upperSpecMax)]; 	
			}
			else if (   (charSetUpperCyr.indexOf(inputValueArr[i])) != -1  )
			{
				inputValueArr[i] = charSetUpperCyr[(charSetUpperCyr.indexOf(inputValueArr[i]))+myShift(shiftValUpperCyr, i , upperCyrMax)]; 	
			}
			else if (   (charSetLowerCyr.indexOf(inputValueArr[i])) != -1  )
			{
				inputValueArr[i] = charSetLowerCyr[(charSetLowerCyr.indexOf(inputValueArr[i]))+myShift(shiftValLowerCyr, i , lowerCyrMax)]; 	
			}
		}
		lead += inputValueArr[i];
	}
	outputValue = keep + lead;
	// writeToLog("m", " OutputValue: " + outputValue )

	if (!iscpf) 
	{
		outputValue = generateCNPJ(outputValue,cnpjBranch,hasmask);
	}
	else
	{
		outputValue = generateCPF(outputValue,hasmask);
	}

}
</jsScript_script>
      </jsScript>
      <jsScript>
        <jsScript_type>1</jsScript_type>
        <jsScript_name>Start</jsScript_name>
        <jsScript_script>//declare variables here - not in the main script... set initial values needed
var i=0;
var outputValue="";
var inputValueArr = '';
var lead = "";
var zero = false;

var iscpf = false;
var hasmask = false;


// configure leadling zero: true / false
var leading0 = true;
// mask numerics only = true  / false
var numeric_only = true;  
// ignore first N characters
var keep_first=0;

//
var last = null;
var initialNumStr		= "0918273645";
var initialLowerCaseStr	= "abcdefghijklmnopqrstuvwxyz";
var initialUpperCaseStr  = "ZYXWVUTSRQPONMLKJIHGFEDCBA";
var initialUpperSpecStr  = "ÀÁÂÃÄÅÆÈÉÊËÇÌÍÎÏÑÐŠÒÓÔÕÖŐÙÚÛÜŰÝŸŽ"
var initialLowerSpecStr  = "àáâãäåæèéêëçìíîïñšòóôõöðùúûüűÿýž"
var initialUpperCyrStr  = "AБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"
var initialLowerCyrStr  = "Aбвгдежзийклмнопрстуфхцчшщъыьэюя"

var numShiftMax = 10;
var lowerShiftMax=26;   //14;
var upperShiftMax=26;  //21;
var upperSpecMax=33
var lowerSpecMax=32
var lowerCyrMax=32
var upperCyrMax=32

var ArbitraryStringNum	= "Delphix delivers data at the speed of business"
var ArbitraryStringLower	= "Really love time off as I can do fancy things!"
var ArbitraryStringUpper	= "That's a simple attempt to do masking of chars"
var ArbitraryStringSpecUpper = "Accented chars look indeed extremly funny"
var ArbitraryStringSpecLower = "Lower case accents are often used in weird words"
var ArbitraryStringCyrUpper = "Cyrilic looks funny but is mostly like Latin"
var ArbitraryStringCyrLower = "Lower case cyrilic looks like uppercase but is different"

// Double the length of the lookup strings so we don't get overflows...cheap way to deal with that
var charSetNumArr  		= (initialNumStr + initialNumStr).split("");
var charSetStrArr	 	= (initialLowerCaseStr + initialLowerCaseStr).split("");
var charSetStrCapsArr 	= (initialUpperCaseStr + initialUpperCaseStr).split("");
var charSetUpperSpec 	= (initialUpperSpecStr + initialUpperSpecStr).split("");
var charSetLowerSpec 	= (initialLowerSpecStr + initialLowerSpecStr).split("");
var charSetUpperCyr 	= (initialUpperCyrStr + initialUpperCyrStr).split("");
var charSetLowerCyr 	= (initialLowerCyrStr + initialLowerCyrStr).split("");

// Use SL encyrption hash to create shift values
var CharShift_NumKey       = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringNum,numShiftMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_UpperCaseKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringUpper,upperShiftMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_LowerCaseKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringLower,lowerShiftMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_UpperSpecKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringSpecUpper,upperSpecMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_LowerSpecKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringSpecLower,lowerSpecMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_UpperCyrKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringCyrUpper,upperCyrMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");
var CharShift_LowerCyrKey = com.masking.encryption.Encryption.getLookupKey(ArbitraryStringCyrLower,lowerCyrMax,  "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/RawBytes.dat", "/var/delphix/dmsuite/resources/keys/Alias.dat");


//Add one to the hash since it can be zero - the ShiftMax values can't be more than the length of the inital string - 1
var shiftValNum = parseInt(CharShift_NumKey, 10)+1;
var shiftValLowerCase = parseInt(CharShift_LowerCaseKey, 10)+1;
var shiftValUpperCase = parseInt(CharShift_UpperCaseKey, 10)+1;
var shiftValUpperSpec = parseInt(CharShift_UpperSpecKey, 10)+1;
var shiftValLowerSpec = parseInt(CharShift_LowerSpecKey, 10)+1;
var shiftValUpperCyr = parseInt(CharShift_UpperCyrKey, 10)+1;
var shiftValLowerCyr = parseInt(CharShift_LowerCyrKey, 10)+1;

// position specific mapping
function myShift( a1, a2, a3) {
	return ((a1 + a2) % a3) + 1;
}

// add leading zeroes
function padLeft(num, size) {
    var s = num+"";
    while (s.length &lt; size) s = "0" + s;
    return s;
}
	

// section for CPF ----------------------------------------------------------------------------------------

// Blacklist common values.
const BLACKLIST_CPF = "00000000000,11111111111,22222222222,33333333333,44444444444,55555555555,66666666666,77777777777,88888888888,99999999999,12345678909";

const STRICT_STRIP_REGEX_CPF = /[.-]/g;
const LOOSE_STRIP_REGEX_CPF = /[^\d]/g;

/**
 * Compute the Verifier Digit (or "Dígito Verificador (DV)" in PT-BR).
 *
 * You can learn more about the algorithm on [wikipedia (pt-br)](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador)
 *
 * @param {string} numbers a string with only numbers.
 * @returns {number} the verifier digit.
 */
function verifierDigitCPF (numbers) {
  numbers = numbers.split("").map(function(number){ return parseInt(number, 10); });

  const modulus = numbers.length + 1;

  const multiplied = numbers.map(function(number, index) {
    return number * (modulus - index);
  });

  const mod = multiplied.reduce(function(buffer, number){
    return buffer + number;
  }) % 11;

  return (mod &lt; 2 ? 0 : 11 - mod);
}
  
/**
 * Transform the input into a pretty CPF format.
 *
 * Example:
 * ```
 * format('12345678901');
 * // Result: '123.456.789-01'
 * ```
 *
 * @param {string} cpf the CPF.
 * @returns {string} the formatted CPF.
 */
function formatCPF (cpf) {
  return cpf.replace(/^(\d{3})(\d{3})(\d{3})(\d{2})$/, "$1.$2.$3-$4");
}

/**
 * Remove some characters from the `number` input.
 *
 * Example:
 * ```
 * strip('29537995593'); // Result: '29537995593'
 * strip('295.379.955-93'); // Result: '29537995593'
 * strip('295a379b9c5d59e3'); // Result: '29537995593'
 * strip('295a379b9c5d59e3', true); // Result: '295a379b9c5d59e3' - Atention!
 * ```
 *
 * @param {string} cpf the CPF text.
 * @param {boolean} [isStrict] if `true`, it will remove only `.` and `-` characters.
 *                             Otherwise, it will remove all non-digit (`[^\d]`) characters. Optional.
 * @returns {string} the stripped CPF.
 */
function stripCPF(cpf, isStrict) {
  const regex = isStrict ? STRICT_STRIP_REGEX_CPF : LOOSE_STRIP_REGEX_CPF;
  return (cpf || "").toString().replace(regex, "");
}

function isValidCPF (cpf) {

  // CPF must have 11 chars
  if (cpf.length !== 11) { return false; }

  // CPF can't be blacklisted
  if (-1 != BLACKLIST_CPF.indexOf(cpf)) { return false; }

  numbers = cpf.substr(0, 9);
  numbers += verifierDigitCPF(numbers);
  numbers += verifierDigitCPF(numbers);

  return numbers.substr(-2) === cpf.substr(-2);
}

/**
 * generateCPF
 *
 * @param {string} cpf the CPF number.
 * @param {boolean} [isStrict] if `true`, it will accept only `digits`, `.` and `-` characters. Optional.
 * @returns {boolean} `true` if CPF is valid. Otherwise, `false`.
 */
function generateCPF (stripped, masked) {

  // CPF must be defined
  if (stripped) { 

  	// CPF must have 11 chars
  	if (stripped.length == 11) { 

  		// CPF can't be blacklisted
  		if (-1 === BLACKLIST_CPF.indexOf(stripped)) {

  			numbers = stripped.substr(0, 9);
  			numbers += verifierDigitCPF(numbers);
  			numbers += verifierDigitCPF(numbers);

  			return (masked) ? formatCPF(numbers) : numbers;
		  }
	  }
  }

  return stripped;
}


// section for CNPJ ----------------------------------------------------------------------------------------

  const BLACKLIST_CNPJ = "00000000000000,11111111111111,22222222222222,33333333333333,44444444444444,55555555555555,66666666666666,77777777777777,88888888888888,99999999999999";
 
  
  const STRICT_STRIP_REGEX_CNPJ = /[-\/.]/g;
  const LOOSE_STRIP_REGEX_CNPJ = /[^\d]/g;
  
  /**
   * Compute the Verifier Digit ("Dígito Verificador (DV)" in portuguese) for CNPJ.
   *
   * [wikipedia (pt-br)](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador)
   *
   * @param {string} numbers the CNPJ string (only numbers)
   * @returns {number} the verifier digit.
   */
  function verifierDigitCNPJ (numbers) {
    index = 2;
    const reverse = numbers.split("").reduce(function(buffer, number) {
      return [parseInt(number, 10)].concat(buffer);
    }, []);
  
    const sum = reverse.reduce(function(buffer, number) {
      buffer += number * index;
      index = (index === 9 ? 2 : index + 1);
      return buffer;
    }, 0);
  
    const mod = sum % 11;
    return (mod &lt; 2 ? 0 : 11 - mod);
  }
  
  /**
   * Prettify CNPJ
   *
   * Example:
   * ```
   * format('54550752000155');
   * // Result: '54.550.752/0001-55'
   * ```
   *
   * @param {string} cnpj the CNPJ.
   * @returns {string} the formatted CNPJ.
   */
  function formatCNPJ (cnpj) {
    return cnpj.replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/, "$1.$2.$3/$4-$5");
  }
  
  
  /**
   * Remove non-numeric characters from string.
   * strict mode will only remove  characters regularly used in CNPJ format
   * 
   * Example:
   * ```
   * strip('54550[752#0001..$55'); // Result: '54550752000155'
   * strip('54550[752#0001..$55', true); // Result: '54550[752#0001..$55' - Atention!
   * ```
   *
    * @param {string} cnpj the CNPJ text.
   * @param {boolean} [isStrict] if `true`, it will remove only `.` and `-` characters.
   *                             Otherwise, it will remove all non-digit (`[^\d]`) characters. Optional.
   * @returns {string} the stripped CNPJ.
   */
 function stripCNPJ (cnpj, isStrict)  {
    const regex = isStrict ? STRICT_STRIP_REGEX_CNPJ : LOOSE_STRIP_REGEX_CNPJ;
    return (cnpj || "").toString().replace(regex, "");
 }

 function isValidCNPJ (cnpj)  {

    // CNPJ must have 14 chars
    if (cnpj.length !== 14) { return false; }

    // CNPJ can't be blacklisted
    if (-1 != BLACKLIST_CNPJ.indexOf(cnpj)) { return false; }
  
    numbers = cnpj.substr(0, 12);
    numbers += verifierDigitCNPJ(numbers);
    numbers += verifierDigitCNPJ(numbers);
  
    return numbers.substr(-2) === cnpj.substr(-2);
  }
  
  /**
   * Validate the CNPJ.
   *
   * @param {string} cnpj the CNPJ number.
   * @param {boolean} [isStrict] if `true`, it will accept only `digits`, `.` and `-` characters. Optional.
   * @returns {boolean} `true` if CNPJ is valid. Otherwise, `false`.
   */
 function generateCNPJ(stripped, branch, masked) {
   
  if (stripped) { 

  	// CNPJ must have 14 chars
  	if (stripped.length == 14) { 

      if (-1 === BLACKLIST_CNPJ.indexOf(stripped)) {

    		numbers = stripped.substr(0, 8).concat(branch);
    		numbers += verifierDigitCNPJ(numbers);
    		numbers += verifierDigitCNPJ(numbers);

        return (masked) ? formatCNPJ(numbers) : numbers;
      }
	  }
  }

  return stripped;
 }
  
</jsScript_script>
      </jsScript>
    </jsScripts>
    <fields>
      <field>
        <name>outputValue</name>
        <rename>outputValue</rename>
        <type>String</type>
        <length>-1</length>
        <precision>-1</precision>
        <replace>N</replace>
      </field>
    </fields>
    <attributes />
    <cluster_schema />
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>256</xloc>
      <yloc>128</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step_error_handling>
    <error>
      <source_step>mask</source_step>
      <target_step />
      <is_enabled>N</is_enabled>
      <nr_valuename />
      <descriptions_valuename />
      <fields_valuename />
      <codes_valuename />
      <max_errors />
      <max_pct_errors />
      <min_pct_rows />
    </error>
  </step_error_handling>
  <slave-step-copy-partition-distribution>
  </slave-step-copy-partition-distribution>
  <slave_transformation>N</slave_transformation>
  <attributes />
</transformation>
